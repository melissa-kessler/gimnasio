"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.printUncheckedSnapshotsSummary = exports.printFailedSuites = exports.printPassedSuites = exports.printSummary = exports.printFailedTestDiffs = exports.printHeaderOnComplete = exports.printHeaderOnStart = exports.println = exports.printf = void 0;
const core_1 = require("@jest/core");
const _1 = require("./");
const assert_never_1 = require("assert-never");
const colours_1 = require("./colours");
const isFailing = (result) => {
    return Boolean(result.numFailingTests > 0 || result.failureMessage);
};
const printf = (...s) => {
    console.log(...s);
};
exports.printf = printf;
const println = (times = 1) => {
    for (let i = 0; i < times; i++) {
        exports.printf("");
    }
};
exports.println = println;
const printHeaderOnStart = () => {
    exports.println(2);
    const reporterVersionString = process.env.npm_package_version
        ? `jest-min-reporter v${process.env.npm_package_version}`
        : "";
    exports.printf(_1.white(`Jest v${core_1.getVersion()} node ${process.version} ${process.platform} ${reporterVersionString}`));
};
exports.printHeaderOnStart = printHeaderOnStart;
const printHeaderOnComplete = () => {
    exports.printf(_1.lightYellow("Summary reporter output:"));
    exports.println(2);
};
exports.printHeaderOnComplete = printHeaderOnComplete;
const printFailedTestDiffs = (results) => {
    results.testResults
        .filter((suite) => suite.failureMessage)
        .ifAny((suites) => {
        suites.forEach((suite) => {
            exports.printf("Failed test diffs:");
            const fullPath = _1.processFullPath(suite.testFilePath);
            const path = fullPath.path || "";
            const file = fullPath.file || "";
            const message = global.reporterGlobals.coloursEnabled
                ? suite.failureMessage
                : colours_1.stripColour(suite.failureMessage || "");
            exports.printf(`${_1.black(_1.bgLightRed(" FAIL "))} ${path}${_1.white(file)}\n${message}`);
            exports.println();
        });
    });
};
exports.printFailedTestDiffs = printFailedTestDiffs;
const printSummary = (results) => {
    const { numTotalTestSuites: totalSuites, numPassedTestSuites: passedSuites, numPendingTestSuites: pendingSuites, numTotalTests: totalTests, numPassedTests: passedTests, numFailedTests: failedTests, numRuntimeErrorTestSuites: erroredTests, snapshot, } = results;
    const failedSuites = totalSuites - passedSuites - pendingSuites;
    const failed = failedTests > 0 || erroredTests > 0 || snapshot.failure;
    exports.printf("Summary:");
    exports.printf(`Suites: ${failed ? _1.lightRed(failedSuites) : _1.green(passedSuites)}/${_1.white(totalSuites)}`);
    exports.printf(`Tests:  ${failed ? _1.lightRed(failedTests) : _1.green(passedTests)}/${_1.white(totalTests)}`);
    exports.printf(`Time:   ${_1.timestampToTimeObject(Date.now() - results.startTime)}`);
};
exports.printSummary = printSummary;
const makeTestFullName = (test) => {
    const pathArray = test.ancestorTitles;
    pathArray.push(test.title);
    return pathArray.join(" -> ");
};
const printTestStatus = (suite, showPassing = false) => {
    suite.testResults.forEach((test) => {
        switch (test.status) {
            case "passed":
                showPassing &&
                    exports.printf(`${_1.green("  ✓  ")}${makeTestFullName(test)}`);
                return;
            case "failed":
                exports.printf(`${_1.red("  ☓  ")}${_1.yellow(makeTestFullName(test))}`);
                return;
            case "skipped":
                exports.printf(`${_1.white("  ○  ")}${makeTestFullName(test)} (Skipped)`);
                return;
            case "pending":
                exports.printf(`${_1.white("  ○  ")}${makeTestFullName(test)} (Pending)`);
                return;
            case "todo":
                exports.printf(`${_1.white("  ○  ")}${makeTestFullName(test)} (Todo)`);
                return;
            case "disabled":
                exports.printf(`${_1.white("  ○  ")}${makeTestFullName(test)} (Disabled)`);
                return;
            default:
                assert_never_1.assertNever(test.status);
        }
    });
};
const fullPathToPrintable = (fullPath) => {
    return {
        path: fullPath.path || "",
        file: fullPath.file || "",
    };
};
const printPassedSuites = (suites, showPassing = false) => {
    suites.testResults.filter(_1.not(isFailing)).ifAny((suites) => {
        exports.printf("Passed suites:");
        suites.forEach((suite) => {
            const { path, file } = fullPathToPrintable(_1.processFullPath(suite.testFilePath));
            exports.printf(`${_1.bgLightGreen(_1.black("  PASS  "))} ${path}${file}`);
            printTestStatus(suite, showPassing);
        });
        exports.println(2);
    });
};
exports.printPassedSuites = printPassedSuites;
const printFailedSuites = (suites, showPassing = false) => {
    suites.testResults.filter(isFailing).ifAny((suites) => {
        exports.printf("Failed suites:");
        suites.forEach((suite) => {
            const { path, file } = fullPathToPrintable(_1.processFullPath(suite.testFilePath));
            exports.printf(`${_1.bgLightRed(_1.black("  FAIL  "))} ${path}${_1.white(file)}`);
            printTestStatus(suite, showPassing);
        });
        exports.println(2);
    });
};
exports.printFailedSuites = printFailedSuites;
const printUncheckedSnapshotsSummary = (snapshot) => {
    snapshot.uncheckedKeysByFile.forEach((snapshotFiles) => {
        const { path, file } = fullPathToPrintable(_1.processFullPath(snapshotFiles.filePath));
        exports.printf(`${path}${_1.white(file)}`);
    });
    exports.println(2);
};
exports.printUncheckedSnapshotsSummary = printUncheckedSnapshotsSummary;
